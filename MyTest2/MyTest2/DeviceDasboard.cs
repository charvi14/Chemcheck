///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest2
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DeviceDasboard recording.
    /// </summary>
    [TestModule("cdc747f2-9ef0-4b51-bdbc-ae20c4892032", ModuleType.Recording, 1)]
    public partial class DeviceDasboard : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest2Repository repository.
        /// </summary>
        public static MyTest2Repository repo = MyTest2Repository.Instance;

        static DeviceDasboard instance = new DeviceDasboard();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DeviceDasboard()
        {
            DeviceNamevar = "chemcheck150A1";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DeviceDasboard Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable DeviceNamevar.
        /// </summary>
        [TestVariable("082a54eb-1d1a-4bb0-b90f-6f2e64b40f00")]
        public string DeviceNamevar
        {
            get { return repo.DeviceNamevar; }
            set { repo.DeviceNamevar = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Problem Detected Section verification
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nProblem Detected Section verification\r\nValidating AttributeEqual (AccessibilityLabel='alertDetected') on item 'ComPentairPentairhome.AlertDetected'.", repo.ComPentairPentairhome.AlertDetectedInfo, new RecordItemIndex(0));
                Validate.AttributeEqual(repo.ComPentairPentairhome.AlertDetectedInfo, "AccessibilityLabel", "alertDetected", null, new Validate.Options(){ReportLevelOnFailure=ReportLevel.Info});
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            // Reminder section validation Successful
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nReminder section validation Successful\r\nValidating AttributeEqual (AccessibilityLabel='Reminder') on item 'ComPentairPentairhome.Reminder'.", repo.ComPentairPentairhome.ReminderInfo, new RecordItemIndex(1));
                Validate.AttributeEqual(repo.ComPentairPentairhome.ReminderInfo, "AccessibilityLabel", "Reminder", null, new Validate.Options(){ReportLevelOnFailure=ReportLevel.Info});
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            // Water Temperature Section validation successful
            Report.Log(ReportLevel.Info, "Validation", "Water Temperature Section validation successful\r\nValidating AttributeEqual (AccessibilityLabel='Water Temperature') on item 'ComPentairPentairhome.WaterTemperature'.", repo.ComPentairPentairhome.WaterTemperatureInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ComPentairPentairhome.WaterTemperatureInfo, "AccessibilityLabel", "Water Temperature");
            Delay.Milliseconds(0);
            
            // PH section validation successful
            Report.Log(ReportLevel.Info, "Validation", "PH section validation successful\r\nValidating AttributeEqual (AccessibilityLabel='pH') on item 'ComPentairPentairhome.ContainerPH'.", repo.ComPentairPentairhome.ContainerPHInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ComPentairPentairhome.ContainerPHInfo, "AccessibilityLabel", "pH");
            Delay.Milliseconds(0);
            
            // Sanitizer section validation successful
            Report.Log(ReportLevel.Info, "Validation", "Sanitizer section validation successful\r\nValidating AttributeEqual (AccessibilityLabel='Sanitizer') on item 'ComPentairPentairhome.Sanitizer'.", repo.ComPentairPentairhome.SanitizerInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ComPentairPentairhome.SanitizerInfo, "AccessibilityLabel", "Sanitizer");
            Delay.Milliseconds(0);
            
            // Water quality section validation successful
            Report.Log(ReportLevel.Info, "Validation", "Water quality section validation successful\r\nValidating AttributeEqual (AccessibilityLabel='Water Quality') on item 'ComPentairPentairhome.WaterQuality'.", repo.ComPentairPentairhome.WaterQualityInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ComPentairPentairhome.WaterQualityInfo, "AccessibilityLabel", "Water Quality");
            Delay.Milliseconds(0);
            
            // Settng icon
            Report.Log(ReportLevel.Info, "Validation", "Settng icon\r\nValidating AttributeEqual (Visible='True') on item 'ComPentairPentairhome.HeaderRightImage'.", repo.ComPentairPentairhome.HeaderRightImageInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ComPentairPentairhome.HeaderRightImageInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ComPentairPentairhome.AssetsSrcCommonFeatureImagesIconBac'.", repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesIconBacInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesIconBacInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibilityLabel=$DeviceNamevar) on item 'ComPentairPentairhome.Dashboard_DeviceName'.", repo.ComPentairPentairhome.Dashboard_DeviceNameInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ComPentairPentairhome.Dashboard_DeviceNameInfo, "AccessibilityLabel", DeviceNamevar);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PH_Screen.Screenshot_DeviceDashboard, false, new RecordItemIndex(9));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
