///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest2
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Water_Balance_Indoor_Pool recording.
    /// </summary>
    [TestModule("6948b244-e3a7-4880-b8ae-a7f83880a00c", ModuleType.Recording, 1)]
    public partial class Water_Balance_Indoor_Pool : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest2Repository repository.
        /// </summary>
        public static MyTest2Repository repo = MyTest2Repository.Instance;

        static Water_Balance_Indoor_Pool instance = new Water_Balance_Indoor_Pool();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Water_Balance_Indoor_Pool()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Water_Balance_Indoor_Pool Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable DeviceNamevar.
        /// </summary>
        [TestVariable("082a54eb-1d1a-4bb0-b90f-6f2e64b40f00")]
        public string DeviceNamevar
        {
            get { return repo.DeviceNamevar; }
            set { repo.DeviceNamevar = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Pool_device_Address' at Center", repo.ComPentairPentairhome.Pool_device_AddressInfo, new RecordItemIndex(0));
            repo.ComPentairPentairhome.Pool_device_Address.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(1));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2' at Center", repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2Info, new RecordItemIndex(2));
            repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Product_Overview.ProductOverviewclick' at Center", repo.Product_Overview.ProductOverviewclickInfo, new RecordItemIndex(3));
            repo.Product_Overview.ProductOverviewclick.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '100' with swipe duration'500ms' and step count '0' on item 'Product_Overview.Nickname'.", repo.Product_Overview.NicknameInfo, new RecordItemIndex(4));
            repo.Product_Overview.Nickname.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "100"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Pool_Add.Address' at Center", repo.Pool_Add.AddressInfo, new RecordItemIndex(5));
            repo.Pool_Add.Address.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(6));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Pool_Add.IndoorPool_Automation' at Center", repo.Pool_Add.IndoorPool_AutomationInfo, new RecordItemIndex(7));
            repo.Pool_Add.IndoorPool_Automation.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(8));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'Pool_Add.DeviceAddressUpdated'.", repo.Pool_Add.DeviceAddressUpdatedInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.Pool_Add.DeviceAddressUpdatedInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Pool_Add.TextOK' at Center", repo.Pool_Add.TextOKInfo, new RecordItemIndex(10));
            repo.Pool_Add.TextOK.Touch();
            Delay.Milliseconds(300);
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'Pool_Add.HomeIcon_without_red' at Center", repo.Pool_Add.HomeIcon_without_redInfo, new RecordItemIndex(11));
                repo.Pool_Add.HomeIcon_without_red.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.AssetsSrcCommonFeatureImagesHomeAle' at Center", repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesHomeAleInfo, new RecordItemIndex(12));
                repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesHomeAle.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(13));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Pool_device_Address' at Center", repo.ComPentairPentairhome.Pool_device_AddressInfo, new RecordItemIndex(14));
            repo.ComPentairPentairhome.Pool_device_Address.Touch();
            Delay.Milliseconds(300);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
