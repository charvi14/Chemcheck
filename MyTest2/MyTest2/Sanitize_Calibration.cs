///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest2
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Sanitize_Calibration recording.
    /// </summary>
    [TestModule("be797428-435c-4a15-abbd-d70d95aada9f", ModuleType.Recording, 1)]
    public partial class Sanitize_Calibration : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest2Repository repository.
        /// </summary>
        public static MyTest2Repository repo = MyTest2Repository.Instance;

        static Sanitize_Calibration instance = new Sanitize_Calibration();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Sanitize_Calibration()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Sanitize_Calibration Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable DeviceNamevar.
        /// </summary>
        [TestVariable("082a54eb-1d1a-4bb0-b90f-6f2e64b40f00")]
        public string DeviceNamevar
        {
            get { return repo.DeviceNamevar; }
            set { repo.DeviceNamevar = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.Pool_device_Address' at Center", repo.ComPentairPentairhome.Pool_device_AddressInfo, new RecordItemIndex(0));
            repo.ComPentairPentairhome.Pool_device_Address.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(1));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2' at Center", repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2Info, new RecordItemIndex(2));
            repo.ComPentairPentairhome.AssetsSrcCommonFeatureImagesGearAt2.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '400' with swipe duration'800ms' and step count '0' on item 'Product_Overview.ContactAProfessional'.", repo.Product_Overview.ContactAProfessionalInfo, new RecordItemIndex(3));
            repo.Product_Overview.ContactAProfessional.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "400"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Calibration.Sanitizer_Calibration' at Center", repo.Calibration.Sanitizer_CalibrationInfo, new RecordItemIndex(4));
            repo.Calibration.Sanitizer_Calibration.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(5));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '2' on item 'Calibration.Calibration_Chlorine'.", repo.Calibration.Calibration_ChlorineInfo, new RecordItemIndex(6));
            repo.Calibration.Calibration_Chlorine.Element.SetAttributeValue("Text", "2");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '250' with swipe duration'800ms' and step count '0' on item 'Calibration.Free_chlorine_Label'.", repo.Calibration.Free_chlorine_LabelInfo, new RecordItemIndex(7));
            repo.Calibration.Free_chlorine_Label.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "250"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Calibration.Calibrate_button' at Center", repo.Calibration.Calibrate_buttonInfo, new RecordItemIndex(8));
            repo.Calibration.Calibrate_button.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(9));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Calibration.Screen_Shot_Callibration, false, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Calibration.Calibration_Ok' at Center", repo.Calibration.Calibration_OkInfo, new RecordItemIndex(11));
            repo.Calibration.Calibration_Ok.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(12));
            Delay.Duration(4000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Calibration.Screen_Shot_Callibration, false, new RecordItemIndex(13));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Pool_Add.HomeIcon_without_red' at Center", repo.Pool_Add.HomeIcon_without_redInfo, new RecordItemIndex(14));
            repo.Pool_Add.HomeIcon_without_red.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(15));
            Delay.Duration(10000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
