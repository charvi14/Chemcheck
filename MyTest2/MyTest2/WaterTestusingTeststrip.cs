///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyTest2
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The WaterTestusingTeststrip recording.
    /// </summary>
    [TestModule("cc01358f-131d-4461-9ef3-541db70e5bf6", ModuleType.Recording, 1)]
    public partial class WaterTestusingTeststrip : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyTest2Repository repository.
        /// </summary>
        public static MyTest2Repository repo = MyTest2Repository.Instance;

        static WaterTestusingTeststrip instance = new WaterTestusingTeststrip();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public WaterTestusingTeststrip()
        {
            PHvalue = "yourValue";
            Chlorine = "";
            pHagain = "yourValue";
            TotalChlorine = "yourValue";
            TotalAlkalinity = "yourValue";
            Calcium = "yourValue";
            CyanuricAcid = "yourValue";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static WaterTestusingTeststrip Instance
        {
            get { return instance; }
        }

#region Variables

        string _PHvalue;

        /// <summary>
        /// Gets or sets the value of variable PHvalue.
        /// </summary>
        [TestVariable("c2afc080-f737-4930-9150-2c45c97e4e11")]
        public string PHvalue
        {
            get { return _PHvalue; }
            set { _PHvalue = value; }
        }

        string _Chlorine;

        /// <summary>
        /// Gets or sets the value of variable Chlorine.
        /// </summary>
        [TestVariable("ffcf14fb-569b-4b5c-879f-29f1344cd5ff")]
        public string Chlorine
        {
            get { return _Chlorine; }
            set { _Chlorine = value; }
        }

        string _pHagain;

        /// <summary>
        /// Gets or sets the value of variable pHagain.
        /// </summary>
        [TestVariable("534b90ad-032d-4be4-b78e-946f9e4a4d71")]
        public string pHagain
        {
            get { return _pHagain; }
            set { _pHagain = value; }
        }

        string _TotalChlorine;

        /// <summary>
        /// Gets or sets the value of variable TotalChlorine.
        /// </summary>
        [TestVariable("0427f98c-9e4d-4eb6-b63e-fe63bb82b738")]
        public string TotalChlorine
        {
            get { return _TotalChlorine; }
            set { _TotalChlorine = value; }
        }

        string _TotalAlkalinity;

        /// <summary>
        /// Gets or sets the value of variable TotalAlkalinity.
        /// </summary>
        [TestVariable("c6147cea-ca21-4b42-a001-76f25696cbad")]
        public string TotalAlkalinity
        {
            get { return _TotalAlkalinity; }
            set { _TotalAlkalinity = value; }
        }

        string _Calcium;

        /// <summary>
        /// Gets or sets the value of variable Calcium.
        /// </summary>
        [TestVariable("2dbafd1c-8a47-4446-83ed-113e386aa2b8")]
        public string Calcium
        {
            get { return _Calcium; }
            set { _Calcium = value; }
        }

        string _CyanuricAcid;

        /// <summary>
        /// Gets or sets the value of variable CyanuricAcid.
        /// </summary>
        [TestVariable("a4b1e81e-297b-4ae7-9e74-8d2775b0e7a5")]
        public string CyanuricAcid
        {
            get { return _CyanuricAcid; }
            set { _CyanuricAcid = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '100' with swipe duration'800ms' and step count '0' on item 'ComPentairPentairhome.Sanitizer'.", repo.ComPentairPentairhome.SanitizerInfo, new RecordItemIndex(0));
            repo.ComPentairPentairhome.Sanitizer.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "100"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WaterQuality' at Center", repo.ComPentairPentairhome.WaterQualityInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.WaterQuality.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.TESTSTRIP' at Center", repo.ComPentairPentairhome.TESTSTRIPInfo, new RecordItemIndex(2));
            repo.ComPentairPentairhome.TESTSTRIP.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(3));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$PHvalue' on item 'Water_Quality.RCTUITextField'.", repo.Water_Quality.RCTUITextFieldInfo, new RecordItemIndex(4));
            repo.Water_Quality.RCTUITextField.Element.SetAttributeValue("Text", PHvalue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.Chlorine' at Center", repo.Water_Quality.ChlorineInfo, new RecordItemIndex(5));
            repo.Water_Quality.Chlorine.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'Water_Quality.TheValidRangeForPHIs59'.", repo.Water_Quality.TheValidRangeForPHIs59Info, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.Water_Quality.TheValidRangeForPHIs59Info, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.TextOK' at Center", repo.Water_Quality.TextOKInfo, new RecordItemIndex(7));
            repo.Water_Quality.TextOK.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(8));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '' on item 'Water_Quality.RCTUITextField'.", repo.Water_Quality.RCTUITextFieldInfo, new RecordItemIndex(9));
            repo.Water_Quality.RCTUITextField.Element.SetAttributeValue("Text", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$pHagain' on item 'Water_Quality.RCTUITextField1'.", repo.Water_Quality.RCTUITextField1Info, new RecordItemIndex(10));
            repo.Water_Quality.RCTUITextField1.Element.SetAttributeValue("Text", pHagain);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$Chlorine' on item 'Water_Quality.Chlorine'.", repo.Water_Quality.ChlorineInfo, new RecordItemIndex(11));
            repo.Water_Quality.Chlorine.Element.SetAttributeValue("Text", Chlorine);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$TotalChlorine' on item 'Water_Quality.TotalChlorine'.", repo.Water_Quality.TotalChlorineInfo, new RecordItemIndex(12));
            repo.Water_Quality.TotalChlorine.Element.SetAttributeValue("Text", TotalChlorine);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$TotalAlkalinity' on item 'Water_Quality.TotalAlkalinity'.", repo.Water_Quality.TotalAlkalinityInfo, new RecordItemIndex(13));
            repo.Water_Quality.TotalAlkalinity.Element.SetAttributeValue("Text", TotalAlkalinity);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$Calcium' on item 'Water_Quality.Calcium'.", repo.Water_Quality.CalciumInfo, new RecordItemIndex(14));
            repo.Water_Quality.Calcium.Element.SetAttributeValue("Text", Calcium);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$CyanuricAcid' on item 'Water_Quality.CyanuricAcid'.", repo.Water_Quality.CyanuricAcidInfo, new RecordItemIndex(15));
            repo.Water_Quality.CyanuricAcid.Element.SetAttributeValue("Text", CyanuricAcid);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.TotalAlkalinitylabel' at Center", repo.Water_Quality.TotalAlkalinitylabelInfo, new RecordItemIndex(16));
            repo.Water_Quality.TotalAlkalinitylabel.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.Save' at Center", repo.Water_Quality.SaveInfo, new RecordItemIndex(17));
            repo.Water_Quality.Save.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(18));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.CONTINUE' at Center", repo.Water_Quality.CONTINUEInfo, new RecordItemIndex(19));
            repo.Water_Quality.CONTINUE.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(20));
            Delay.Duration(5000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Water_Quality.Screenshot_balanced, false, new RecordItemIndex(21));
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.SodiumCarbonate' at Center", repo.Water_Quality.SodiumCarbonateInfo, new RecordItemIndex(22));
            repo.Water_Quality.SodiumCarbonate.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.RecommendCONTINUE' at Center", repo.Water_Quality.RecommendCONTINUEInfo, new RecordItemIndex(23));
            repo.Water_Quality.RecommendCONTINUE.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'Water_Quality.RecommendedDosage'.", repo.Water_Quality.RecommendedDosageInfo, new RecordItemIndex(24));
            Validate.AttributeEqual(repo.Water_Quality.RecommendedDosageInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.Save' at Center", repo.Water_Quality.SaveInfo, new RecordItemIndex(25));
            repo.Water_Quality.Save.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(26));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '100' with swipe duration'800ms' and step count '0' on item 'ComPentairPentairhome.Sanitizer'.", repo.ComPentairPentairhome.SanitizerInfo, new RecordItemIndex(27));
            repo.ComPentairPentairhome.Sanitizer.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "100"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "800ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WaterQuality' at Center", repo.ComPentairPentairhome.WaterQualityInfo, new RecordItemIndex(28));
            repo.ComPentairPentairhome.WaterQuality.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.View_Test_history' at Center", repo.Water_Quality.View_Test_historyInfo, new RecordItemIndex(29));
            repo.Water_Quality.View_Test_history.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(30));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Water_Quality.Unbalanced_icon' at Center", repo.Water_Quality.Unbalanced_iconInfo, new RecordItemIndex(31));
            repo.Water_Quality.Unbalanced_icon.Touch();
            Delay.Milliseconds(300);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.Water_Quality.Screenshot_balanced, false, new RecordItemIndex(32));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (AccessibilityLabel=$pHagain) on item 'Water_Quality.PH_value'.", repo.Water_Quality.PH_valueInfo, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.Water_Quality.PH_valueInfo, "AccessibilityLabel", pHagain);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'Pool_Add.HomeIcon_without_red' at Center", repo.Pool_Add.HomeIcon_without_redInfo, new RecordItemIndex(34));
            repo.Pool_Add.HomeIcon_without_red.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(35));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
